// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Books", testBooks)
	t.Run("Shops", testShops)
	t.Run("Stocks", testStocks)
}

func TestDelete(t *testing.T) {
	t.Run("Books", testBooksDelete)
	t.Run("Shops", testShopsDelete)
	t.Run("Stocks", testStocksDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Books", testBooksQueryDeleteAll)
	t.Run("Shops", testShopsQueryDeleteAll)
	t.Run("Stocks", testStocksQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Books", testBooksSliceDeleteAll)
	t.Run("Shops", testShopsSliceDeleteAll)
	t.Run("Stocks", testStocksSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Books", testBooksExists)
	t.Run("Shops", testShopsExists)
	t.Run("Stocks", testStocksExists)
}

func TestFind(t *testing.T) {
	t.Run("Books", testBooksFind)
	t.Run("Shops", testShopsFind)
	t.Run("Stocks", testStocksFind)
}

func TestBind(t *testing.T) {
	t.Run("Books", testBooksBind)
	t.Run("Shops", testShopsBind)
	t.Run("Stocks", testStocksBind)
}

func TestOne(t *testing.T) {
	t.Run("Books", testBooksOne)
	t.Run("Shops", testShopsOne)
	t.Run("Stocks", testStocksOne)
}

func TestAll(t *testing.T) {
	t.Run("Books", testBooksAll)
	t.Run("Shops", testShopsAll)
	t.Run("Stocks", testStocksAll)
}

func TestCount(t *testing.T) {
	t.Run("Books", testBooksCount)
	t.Run("Shops", testShopsCount)
	t.Run("Stocks", testStocksCount)
}

func TestHooks(t *testing.T) {
	t.Run("Books", testBooksHooks)
	t.Run("Shops", testShopsHooks)
	t.Run("Stocks", testStocksHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
	t.Run("Shops", testShopsInsert)
	t.Run("Shops", testShopsInsertWhitelist)
	t.Run("Stocks", testStocksInsert)
	t.Run("Stocks", testStocksInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("StockToBookUsingBook", testStockToOneBookUsingBook)
	t.Run("StockToShopUsingShop", testStockToOneShopUsingShop)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BookToStocks", testBookToManyStocks)
	t.Run("ShopToStocks", testShopToManyStocks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("StockToBookUsingStocks", testStockToOneSetOpBookUsingBook)
	t.Run("StockToShopUsingStocks", testStockToOneSetOpShopUsingShop)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("StockToBookUsingStocks", testStockToOneRemoveOpBookUsingBook)
	t.Run("StockToShopUsingStocks", testStockToOneRemoveOpShopUsingShop)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BookToStocks", testBookToManyAddOpStocks)
	t.Run("ShopToStocks", testShopToManyAddOpStocks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BookToStocks", testBookToManySetOpStocks)
	t.Run("ShopToStocks", testShopToManySetOpStocks)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BookToStocks", testBookToManyRemoveOpStocks)
	t.Run("ShopToStocks", testShopToManyRemoveOpStocks)
}

func TestReload(t *testing.T) {
	t.Run("Books", testBooksReload)
	t.Run("Shops", testShopsReload)
	t.Run("Stocks", testStocksReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Books", testBooksReloadAll)
	t.Run("Shops", testShopsReloadAll)
	t.Run("Stocks", testStocksReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Books", testBooksSelect)
	t.Run("Shops", testShopsSelect)
	t.Run("Stocks", testStocksSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Books", testBooksUpdate)
	t.Run("Shops", testShopsUpdate)
	t.Run("Stocks", testStocksUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Books", testBooksSliceUpdateAll)
	t.Run("Shops", testShopsSliceUpdateAll)
	t.Run("Stocks", testStocksSliceUpdateAll)
}
