// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShops(t *testing.T) {
	t.Parallel()

	query := Shops()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Shops().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Shop exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopExists to return true, but got false.")
	}
}

func testShopsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopFound, err := FindShop(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Shops().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Shops().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopOne := &Shop{}
	shopTwo := &Shop{}
	if err = randomize.Struct(seed, shopOne, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}
	if err = randomize.Struct(seed, shopTwo, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopOne := &Shop{}
	shopTwo := &Shop{}
	if err = randomize.Struct(seed, shopOne, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}
	if err = randomize.Struct(seed, shopTwo, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func shopAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
	*o = Shop{}
	return nil
}

func testShopsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Shop{}
	o := &Shop{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Shop object: %s", err)
	}

	AddShopHook(boil.BeforeInsertHook, shopBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopBeforeInsertHooks = []ShopHook{}

	AddShopHook(boil.AfterInsertHook, shopAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopAfterInsertHooks = []ShopHook{}

	AddShopHook(boil.AfterSelectHook, shopAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopAfterSelectHooks = []ShopHook{}

	AddShopHook(boil.BeforeUpdateHook, shopBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopBeforeUpdateHooks = []ShopHook{}

	AddShopHook(boil.AfterUpdateHook, shopAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopAfterUpdateHooks = []ShopHook{}

	AddShopHook(boil.BeforeDeleteHook, shopBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopBeforeDeleteHooks = []ShopHook{}

	AddShopHook(boil.AfterDeleteHook, shopAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopAfterDeleteHooks = []ShopHook{}

	AddShopHook(boil.BeforeUpsertHook, shopBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopBeforeUpsertHooks = []ShopHook{}

	AddShopHook(boil.AfterUpsertHook, shopAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopAfterUpsertHooks = []ShopHook{}
}

func testShopsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopToManyStocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shop
	var b, c Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ShopID, a.ID)
	queries.Assign(&c.ShopID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Stocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ShopID, b.ShopID) {
			bFound = true
		}
		if queries.Equal(v.ShopID, c.ShopID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShopSlice{&a}
	if err = a.L.LoadStocks(ctx, tx, false, (*[]*Shop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Stocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Stocks = nil
	if err = a.L.LoadStocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Stocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShopToManyAddOpStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shop
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Stock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ShopID) {
			t.Error("foreign key was wrong value", a.ID, first.ShopID)
		}
		if !queries.Equal(a.ID, second.ShopID) {
			t.Error("foreign key was wrong value", a.ID, second.ShopID)
		}

		if first.R.Shop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Shop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Stocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Stocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Stocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testShopToManySetOpStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shop
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStocks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Stocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStocks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Stocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShopID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ShopID) {
		t.Error("foreign key was wrong value", a.ID, d.ShopID)
	}
	if !queries.Equal(a.ID, e.ShopID) {
		t.Error("foreign key was wrong value", a.ID, e.ShopID)
	}

	if b.R.Shop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Shop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Shop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Shop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Stocks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Stocks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testShopToManyRemoveOpStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shop
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStocks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Stocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStocks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Stocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShopID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Shop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Shop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Shop != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Shop != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Stocks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Stocks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Stocks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testShopsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopDBTypes = map[string]string{`ID`: `bigint`, `ShopName`: `text`}
	_           = bytes.MinRead
)

func testShopsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopAllColumns) == len(shopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopDBTypes, true, shopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopAllColumns) == len(shopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Shop{}
	if err = randomize.Struct(seed, o, shopDBTypes, true, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopDBTypes, true, shopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopAllColumns, shopPrimaryKeyColumns) {
		fields = shopAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopAllColumns,
			shopPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopsUpsert(t *testing.T) {
	t.Parallel()

	if len(shopAllColumns) == len(shopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Shop{}
	if err = randomize.Struct(seed, &o, shopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Shop: %s", err)
	}

	count, err := Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopDBTypes, false, shopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Shop: %s", err)
	}

	count, err = Shops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
