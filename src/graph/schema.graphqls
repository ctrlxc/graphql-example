type Query {
  node(id: ID!): Node!
  nodes(ids: [ID!]): [Node!]!

  shops(
    after: Cursor
    before: Cursor
    first: Int
    last: Int
    query: String!
    orderBy: [ShopOrder!] = [{field: CREATED_AT, direction: DESC}]
  ): ShopConnection!

  books(
    after: Cursor
    before: Cursor
    first: Int
    last: Int
    query: String!
    orderBy: [BookOrder!] = [{field: CREATED_AT, direction: DESC}]
  ): BookConnection!
}

type Shop implements Node {
  id: ID!
  shopName: String
  createdAt: DateTime
  updatedAt: DateTime
  books: [Book!]!
}

type ShopConnection implements Connection {
  edges: [ShopEdge]
  nodes: [Shop]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ShopEdge implements Edge {
  cursor: Cursor!
  node: Shop!
}

input ShopOrder {
  field: ShopOrderField
  direction: OrderDirection
}

enum ShopOrderField {
  ID
  SHOP_NAME
  CREATED_AT
  UPDATED_AT
}

type Book implements Node {
  id: ID!
  bookTitle: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BookConnection implements Connection {
  edges: [BookEdge]
  nodes: [Book]
  pageInfo: PageInfo!
  totalCount: Int!
}

type BookEdge implements Edge {
  cursor: Cursor!
  node: Book!
}

input BookOrder {
  field: BookOrderField
  direction: OrderDirection
}

enum BookOrderField {
  ID
  BOOK_TITLE
  CREATED_AT
  UPDATED_AT
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

interface Connection {
  edges: [Edge]
  nodes: [Node]
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Edge {
  cursor: Cursor!
  node: Node!
}

interface Node {
  id: ID!
}

scalar DateTime
scalar Cursor

