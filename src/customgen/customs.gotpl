{{ reserveImport "context"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "strings"  }}

{{ reserveImport "app/paginator"  }}

{{ range $order := .Orders }}
func {{ $order }}ToInterface(orders []*{{ $order }}) []interface{} {
	ifs := make([]interface{}, len(orders))
	for i, o := range orders {
		ifs[i] = o
	}

	return ifs
}

func {{ $order }}ToPaginatorOrder(orders []*{{ $order }}) []*paginator.PaginatorOrder {
	pagenatorOrders := make([]*paginator.PaginatorOrder, len(orders))

	for i, o := range orders {
		pagenatorOrders[i] = &paginator.PaginatorOrder{Field: strings.ToLower(string(*o.Field)), Direction: paginator.PaginatorDirection(*o.Direction)}
	}

	return pagenatorOrders
}
{{- end}}
